{"version":3,"sources":["App.js","data.js","calcbuttons.js","serviceWorker.js","index.js"],"names":["App","state","display","display1","number","d","x","finalNumb","count","handleClick","event","_this","target","innerHTML","id","forEach","element","push","join","replace","setState","equal","eval","_this2","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","Data","map","button","_calcbuttons__WEBPACK_IMPORTED_MODULE_8__","data","handleCalculations","React","Component","class","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Calc","props","onClick","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63c83590.chunk.js","sourcesContent":["import React from 'react';\nimport Data from './data.js'\nimport './App.css';\nimport Calc from './calcbuttons'\n\nclass App extends React.Component {\n\n        state = {\n            display: 0\n        }\n\n        display1 = []\n        number = []\n        d = 0\n        x = ''\n        finalNumb = ''\n        count = 0\n\n        handleClick = (event) => {\n\n\n            if (this.state.display === 0 && event.target.innerHTML == 0) {\n                return;\n            }\n\n            if (event.target.id === 'decimal') {\n\n                this.count++\n                if (this.count > 1) return\n                this.display1.forEach(function (element) {\n                    \n                    if (element == '.') {\n                        \n                        return\n                    }\n                })\n            }\n            this.display1.push(event.target.innerHTML)\n\n            this.d = this.display1.join('')\n            this.d = this.d.replace(/\\s/g, \"\")\n\n\n            if (event.target.id === 'clear') {\n                this.display1 = []\n                this.d = 0\n                this.count = 0\n                this.number = []\n            }\n\n            if (event.target.id === 'add'||event.target.id === 'subtract'||event.target.id === 'multiply'||event.target.id === 'divide') this.count = 0\n\n            this.setState({\n                display: this.d\n            })\n        }\n\n\n\n        equal = (event) => {\n\n          \n\n            this.x = this.state.display\n            this.x = eval(this.x)\n\n            this.display1 = []\n            this.display1.push(this.x)\n            this.setState({\n                display: this.x\n            })\n\n\n\n        }\n\n        render() {\n\n            return ( <\n                div className = \"App\" >\n                <\n                div className = \"calc\" >\n                <\n                h3 id = \"display\" > {\n                    this.state.display\n                } < /h3> {\n                Data.map(button => < Calc data = {\n                        button\n                    }\n                    handleClick = {\n                        this.handleClick\n                    }\n                    handleCalculations = {\n                        this.handleCalculations\n                    }\n                    equal = {\n                        this.equal\n                    }\n                    />)}\n\n                    <\n                    h4 > Adham < /h4>\n\n                    <\n                    /div> < /\n                    div >\n                );\n\n\n            }\n        }\n\n        export default App;\n","\r\nconst Data=[\r\n    \r\n    {\r\n        number:'AC',\r\n        id:'clear',\r\n        \r\n    },\r\n    {\r\n        number:'/',\r\n        id:'divide',\r\n        class:'operator'\r\n    },\r\n    {\r\n        number:'*',\r\n        id:'multiply',\r\n        class:'operator'\r\n    },\r\n    \r\n   \r\n    \r\n    {\r\n        number:'-',\r\n        id:'subtract',\r\n        class:'operator'\r\n    },\r\n    \r\n    \r\n    \r\n    \r\n    {\r\n         number:7,\r\n        id:'seven'\r\n    },\r\n    \r\n    {\r\n         number:8,\r\n        id:'eight'\r\n    },\r\n    {\r\n         number:9,\r\n        id:'nine'\r\n    },\r\n    \r\n        {\r\n        number:'+',\r\n        id:'add',\r\n     class:'operator'\r\n    },\r\n    {\r\n         number:4,\r\n        id:'four'\r\n    },\r\n    \r\n    {\r\n         number:5,\r\n        id:'five'\r\n    },\r\n    \r\n    {\r\n         number:6,\r\n        id:'six'\r\n    },\r\n{\r\n        number:'',\r\n        id:''\r\n    },    \r\n    { number:1,\r\n        id:'one'},\r\n    {\r\n         number:2,\r\n        id:'two'\r\n    },\r\n    \r\n     \r\n    \r\n    \r\n    {\r\n    number:3,\r\n        id:'three'\r\n    }\r\n    ,\r\n    {\r\n    number:'=',\r\n        id:'equals',\r\n        class:'equals'\r\n    },\r\n     {\r\n    number:'0',\r\n        id:'zero'\r\n    },\r\n     {\r\n    number:'.',\r\n        id:'decimal'\r\n    }\r\n    \r\n    \r\n]\r\n\r\nexport default Data","import React from 'react'\r\n\r\nfunction Calc(props){\r\n   \r\n\r\n    \r\n    \r\nreturn(\r\n\r\n            \r\n            props.data.id==='equals'?<div className=\"button {porps.data.class}\" id={props.data.id} onClick={props.equal}> {props.data.number}</div> : <div className=\"button\" id={props.data.id} onClick={props.handleClick}> {props.data.number}</div>\r\n\r\n \r\n   )\r\n\r\n    \r\n}\r\n\r\nexport default Calc","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}